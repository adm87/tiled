package tiled

import (
	"encoding/xml"
	"testing"
)

// Real sample map TMX data - using the actual sample-map.tmx content
const sampleMapTMX = `<?xml version="1.0" encoding="UTF-8"?>
<map version="1.10" tiledversion="1.11.2" orientation="orthogonal" renderorder="right-down" width="40" height="24" tilewidth="8" tileheight="8" infinite="0" nextlayerid="4" nextobjectid="107">
 <tileset firstgid="1" source="../tilesheets/sample-sheet.tsx"/>
 <layer id="1" name="Tiles" width="40" height="24" locked="1">
  <data encoding="csv">
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2684354595,0,0,3221225498,3,3,3,3,3,3,3,3,3,3,3,33,3,3,26,0,0,0,0,
3,3,3,3,3,3,3,3,33,3,3,3,3,3,3,3,3,2684354595,0,0,2684354647,12,1610612779,3,3,3,3,3,3221225515,12,12,12,12,12,12,87,0,0,0,0,
3,3,3,3,3,3,3,3,3,18,3,3,2684354594,3221225507,3221225507,3221225507,3221225507,80,0,0,0,0,3221225498,33,3,3,3221225515,12,87,0,0,0,0,0,0,0,0,0,0,0,
3,3,18,3,3,3,2684354594,3221225507,3221225507,3221225507,3221225506,3,2684354595,0,0,0,0,0,0,0,0,0,3221225498,3,3,3,26,0,0,0,0,0,9,0,0,0,0,0,0,0,
3,3,3,3,3,25,2684354595,0,0,0,1610612771,3,2684354595,0,0,0,0,0,0,0,0,0,3221225498,3,3,18,26,0,0,0,0,0,24,0,0,0,0,88,0,0,
3221225507,3221225507,3221225507,3221225507,3221225507,3221225507,80,0,0,0,1610612771,3,2684354595,0,0,0,0,0,0,0,0,0,2684354647,12,12,12,87,0,0,0,0,0,39,0,0,0,71,42,42,42,
0,3221225538,0,0,0,0,0,0,0,0,2684354640,3221225507,80,0,0,0,2,0,0,0,0,0,0,3221225545,0,0,0,0,0,0,0,0,54,0,0,0,28,3,3,33,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,28,3,3,3,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,71,42,42,42,2147483719,0,0,0,28,3,3,3,
0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,0,0,0,0,9,0,28,3,3,25,2147483676,0,0,0,28,3,3,3,
0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,24,0,28,3,3,3,2147483676,0,0,0,28,33,3,3,
0,0,0,0,32,0,0,0,0,0,0,0,2147483713,35,35,35,35,65,0,0,0,0,0,0,0,0,39,0,28,3,3,3,2147483691,42,42,42,43,3,3,3,
0,0,0,0,47,0,0,0,0,0,0,0,2147483667,3,3,3,18,19,0,0,0,0,0,0,0,0,54,0,28,25,3,3,3,3,3,18,3,3,3,3,
0,81,0,66,62,0,0,0,0,0,0,0,2147483667,3,3,3,3,19,0,0,0,0,0,0,0,0,69,88,28,3,3,3,3,3,3,3,3,3,3,3,
35,35,35,35,35,65,0,0,0,0,0,7,22,3,3,3,3,19,0,0,0,0,0,0,0,71,42,42,43,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,25,3,19,0,0,0,0,7,22,3,18,3,3,3,19,0,0,0,0,2,0,0,28,3,3,3,3,10,42,42,42,33,3,3,3,3,3,
3,3,3,3,3,19,0,0,0,2147483713,22,3,3,3,3,3,3,2684354582,2684354567,66,0,0,17,0,0,28,33,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,19,76,76,76,2147483667,3,3,18,3,3,3,3,3,2684354582,65,0,0,32,0,0,28,3,3,3,3,3,3,3,18,42,42,42,18,3,3,
3,3,3,3,33,34,35,35,35,2147483682,3,3,3,3,3,3,3,3,3,19,0,66,62,0,14,29,3,33,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,18,3,3,3,18,35,35,35,35,33,3,25,34,35,35,35,42,29,40,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,10,3,3,3,3,3,3,3,3,3,33,42,18,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
</data>
 </layer>
 <layer id="1" name="Tiles" width="40" height="24" locked="1">
  <data encoding="csv">
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2684354595,0,0,3221225498,3,3,3,3,3,3,3,3,3,3,3,33,3,3,26,0,0,0,0,
3,3,3,3,3,3,3,3,33,3,3,3,3,3,3,3,3,2684354595,0,0,2684354647,12,1610612779,3,3,3,3,3,3221225515,12,12,12,12,12,12,87,0,0,0,0,
3,3,3,3,3,3,3,3,3,18,3,3,2684354594,3221225507,3221225507,3221225507,3221225507,80,0,0,0,0,3221225498,33,3,3,3221225515,12,87,0,0,0,0,0,0,0,0,0,0,0,
3,3,18,3,3,3,2684354594,3221225507,3221225507,3221225507,3221225506,3,2684354595,0,0,0,0,0,0,0,0,0,3221225498,3,3,3,26,0,0,0,0,0,9,0,0,0,0,0,0,0,
3,3,3,3,3,25,2684354595,0,0,0,1610612771,3,2684354595,0,0,0,0,0,0,0,0,0,3221225498,3,3,18,26,0,0,0,0,0,24,0,0,0,0,88,0,0,
3221225507,3221225507,3221225507,3221225507,3221225507,3221225507,80,0,0,0,1610612771,3,2684354595,0,0,0,0,0,0,0,0,0,2684354647,12,12,12,87,0,0,0,0,0,39,0,0,0,71,42,42,42,
0,3221225538,0,0,0,0,0,0,0,0,2684354640,3221225507,80,0,0,0,2,0,0,0,0,0,0,3221225545,0,0,0,0,0,0,0,0,54,0,0,0,28,3,3,33,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,28,3,3,3,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,71,42,42,42,2147483719,0,0,0,28,3,3,3,
0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,0,0,0,0,9,0,28,3,3,25,2147483676,0,0,0,28,3,3,3,
0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,24,0,28,3,3,3,2147483676,0,0,0,28,33,3,3,
0,0,0,0,32,0,0,0,0,0,0,0,2147483713,35,35,35,35,65,0,0,0,0,0,0,0,0,39,0,28,3,3,3,2147483691,42,42,42,43,3,3,3,
0,0,0,0,47,0,0,0,0,0,0,0,2147483667,3,3,3,18,19,0,0,0,0,0,0,0,0,54,0,28,25,3,3,3,3,3,18,3,3,3,3,
0,81,0,66,62,0,0,0,0,0,0,0,2147483667,3,3,3,3,19,0,0,0,0,0,0,0,0,69,88,28,3,3,3,3,3,3,3,3,3,3,3,
35,35,35,35,35,65,0,0,0,0,0,7,22,3,3,3,3,19,0,0,0,0,0,0,0,71,42,42,43,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,25,3,19,0,0,0,0,7,22,3,18,3,3,3,19,0,0,0,0,2,0,0,28,3,3,3,3,10,42,42,42,33,3,3,3,3,3,
3,3,3,3,3,19,0,0,0,2147483713,22,3,3,3,3,3,3,2684354582,2684354567,66,0,0,17,0,0,28,33,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,19,76,76,76,2147483667,3,3,18,3,3,3,3,3,2684354582,65,0,0,32,0,0,28,3,3,3,3,3,3,3,18,42,42,42,18,3,3,
3,3,3,3,33,34,35,35,35,2147483682,3,3,3,3,3,3,3,3,3,19,0,66,62,0,14,29,3,33,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,18,3,3,3,18,35,35,35,35,33,3,25,34,35,35,35,42,29,40,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,10,3,3,3,3,3,3,3,3,3,33,42,18,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
</data>
 </layer>
 <layer id="1" name="Tiles" width="40" height="24" locked="1">
  <data encoding="csv">
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2684354595,0,0,3221225498,3,3,3,3,3,3,3,3,3,3,3,33,3,3,26,0,0,0,0,
3,3,3,3,3,3,3,3,33,3,3,3,3,3,3,3,3,2684354595,0,0,2684354647,12,1610612779,3,3,3,3,3,3221225515,12,12,12,12,12,12,87,0,0,0,0,
3,3,3,3,3,3,3,3,3,18,3,3,2684354594,3221225507,3221225507,3221225507,3221225507,80,0,0,0,0,3221225498,33,3,3,3221225515,12,87,0,0,0,0,0,0,0,0,0,0,0,
3,3,18,3,3,3,2684354594,3221225507,3221225507,3221225507,3221225506,3,2684354595,0,0,0,0,0,0,0,0,0,3221225498,3,3,3,26,0,0,0,0,0,9,0,0,0,0,0,0,0,
3,3,3,3,3,25,2684354595,0,0,0,1610612771,3,2684354595,0,0,0,0,0,0,0,0,0,3221225498,3,3,18,26,0,0,0,0,0,24,0,0,0,0,88,0,0,
3221225507,3221225507,3221225507,3221225507,3221225507,3221225507,80,0,0,0,1610612771,3,2684354595,0,0,0,0,0,0,0,0,0,2684354647,12,12,12,87,0,0,0,0,0,39,0,0,0,71,42,42,42,
0,3221225538,0,0,0,0,0,0,0,0,2684354640,3221225507,80,0,0,0,2,0,0,0,0,0,0,3221225545,0,0,0,0,0,0,0,0,54,0,0,0,28,3,3,33,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,28,3,3,3,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,71,42,42,42,2147483719,0,0,0,28,3,3,3,
0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,0,0,0,0,9,0,28,3,3,25,2147483676,0,0,0,28,3,3,3,
0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,24,0,28,3,3,3,2147483676,0,0,0,28,33,3,3,
0,0,0,0,32,0,0,0,0,0,0,0,2147483713,35,35,35,35,65,0,0,0,0,0,0,0,0,39,0,28,3,3,3,2147483691,42,42,42,43,3,3,3,
0,0,0,0,47,0,0,0,0,0,0,0,2147483667,3,3,3,18,19,0,0,0,0,0,0,0,0,54,0,28,25,3,3,3,3,3,18,3,3,3,3,
0,81,0,66,62,0,0,0,0,0,0,0,2147483667,3,3,3,3,19,0,0,0,0,0,0,0,0,69,88,28,3,3,3,3,3,3,3,3,3,3,3,
35,35,35,35,35,65,0,0,0,0,0,7,22,3,3,3,3,19,0,0,0,0,0,0,0,71,42,42,43,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,25,3,19,0,0,0,0,7,22,3,18,3,3,3,19,0,0,0,0,2,0,0,28,3,3,3,3,10,42,42,42,33,3,3,3,3,3,
3,3,3,3,3,19,0,0,0,2147483713,22,3,3,3,3,3,3,2684354582,2684354567,66,0,0,17,0,0,28,33,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,19,76,76,76,2147483667,3,3,18,3,3,3,3,3,2684354582,65,0,0,32,0,0,28,3,3,3,3,3,3,3,18,42,42,42,18,3,3,
3,3,3,3,33,34,35,35,35,2147483682,3,3,3,3,3,3,3,3,3,19,0,66,62,0,14,29,3,33,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,18,3,3,3,18,35,35,35,35,33,3,25,34,35,35,35,42,29,40,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,10,3,3,3,3,3,3,3,3,3,33,42,18,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
</data>
 </layer>
 <layer id="1" name="Tiles" width="40" height="24" locked="1">
  <data encoding="csv">
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2684354595,0,0,3221225498,3,3,3,3,3,3,3,3,3,3,3,33,3,3,26,0,0,0,0,
3,3,3,3,3,3,3,3,33,3,3,3,3,3,3,3,3,2684354595,0,0,2684354647,12,1610612779,3,3,3,3,3,3221225515,12,12,12,12,12,12,87,0,0,0,0,
3,3,3,3,3,3,3,3,3,18,3,3,2684354594,3221225507,3221225507,3221225507,3221225507,80,0,0,0,0,3221225498,33,3,3,3221225515,12,87,0,0,0,0,0,0,0,0,0,0,0,
3,3,18,3,3,3,2684354594,3221225507,3221225507,3221225507,3221225506,3,2684354595,0,0,0,0,0,0,0,0,0,3221225498,3,3,3,26,0,0,0,0,0,9,0,0,0,0,0,0,0,
3,3,3,3,3,25,2684354595,0,0,0,1610612771,3,2684354595,0,0,0,0,0,0,0,0,0,3221225498,3,3,18,26,0,0,0,0,0,24,0,0,0,0,88,0,0,
3221225507,3221225507,3221225507,3221225507,3221225507,3221225507,80,0,0,0,1610612771,3,2684354595,0,0,0,0,0,0,0,0,0,2684354647,12,12,12,87,0,0,0,0,0,39,0,0,0,71,42,42,42,
0,3221225538,0,0,0,0,0,0,0,0,2684354640,3221225507,80,0,0,0,2,0,0,0,0,0,0,3221225545,0,0,0,0,0,0,0,0,54,0,0,0,28,3,3,33,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,28,3,3,3,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,71,42,42,42,2147483719,0,0,0,28,3,3,3,
0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,0,0,0,0,9,0,28,3,3,25,2147483676,0,0,0,28,3,3,3,
0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,24,0,28,3,3,3,2147483676,0,0,0,28,33,3,3,
0,0,0,0,32,0,0,0,0,0,0,0,2147483713,35,35,35,35,65,0,0,0,0,0,0,0,0,39,0,28,3,3,3,2147483691,42,42,42,43,3,3,3,
0,0,0,0,47,0,0,0,0,0,0,0,2147483667,3,3,3,18,19,0,0,0,0,0,0,0,0,54,0,28,25,3,3,3,3,3,18,3,3,3,3,
0,81,0,66,62,0,0,0,0,0,0,0,2147483667,3,3,3,3,19,0,0,0,0,0,0,0,0,69,88,28,3,3,3,3,3,3,3,3,3,3,3,
35,35,35,35,35,65,0,0,0,0,0,7,22,3,3,3,3,19,0,0,0,0,0,0,0,71,42,42,43,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,25,3,19,0,0,0,0,7,22,3,18,3,3,3,19,0,0,0,0,2,0,0,28,3,3,3,3,10,42,42,42,33,3,3,3,3,3,
3,3,3,3,3,19,0,0,0,2147483713,22,3,3,3,3,3,3,2684354582,2684354567,66,0,0,17,0,0,28,33,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,19,76,76,76,2147483667,3,3,18,3,3,3,3,3,2684354582,65,0,0,32,0,0,28,3,3,3,3,3,3,3,18,42,42,42,18,3,3,
3,3,3,3,33,34,35,35,35,2147483682,3,3,3,3,3,3,3,3,3,19,0,66,62,0,14,29,3,33,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,18,3,3,3,18,35,35,35,35,33,3,25,34,35,35,35,42,29,40,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,10,3,3,3,3,3,3,3,3,3,33,42,18,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
</data>
 </layer>
 <layer id="1" name="Tiles" width="40" height="24" locked="1">
  <data encoding="csv">
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2684354595,0,0,3221225498,3,3,3,3,3,3,3,3,3,3,3,33,3,3,26,0,0,0,0,
3,3,3,3,3,3,3,3,33,3,3,3,3,3,3,3,3,2684354595,0,0,2684354647,12,1610612779,3,3,3,3,3,3221225515,12,12,12,12,12,12,87,0,0,0,0,
3,3,3,3,3,3,3,3,3,18,3,3,2684354594,3221225507,3221225507,3221225507,3221225507,80,0,0,0,0,3221225498,33,3,3,3221225515,12,87,0,0,0,0,0,0,0,0,0,0,0,
3,3,18,3,3,3,2684354594,3221225507,3221225507,3221225507,3221225506,3,2684354595,0,0,0,0,0,0,0,0,0,3221225498,3,3,3,26,0,0,0,0,0,9,0,0,0,0,0,0,0,
3,3,3,3,3,25,2684354595,0,0,0,1610612771,3,2684354595,0,0,0,0,0,0,0,0,0,3221225498,3,3,18,26,0,0,0,0,0,24,0,0,0,0,88,0,0,
3221225507,3221225507,3221225507,3221225507,3221225507,3221225507,80,0,0,0,1610612771,3,2684354595,0,0,0,0,0,0,0,0,0,2684354647,12,12,12,87,0,0,0,0,0,39,0,0,0,71,42,42,42,
0,3221225538,0,0,0,0,0,0,0,0,2684354640,3221225507,80,0,0,0,2,0,0,0,0,0,0,3221225545,0,0,0,0,0,0,0,0,54,0,0,0,28,3,3,33,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,28,3,3,3,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,71,42,42,42,2147483719,0,0,0,28,3,3,3,
0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,0,0,0,0,9,0,28,3,3,25,2147483676,0,0,0,28,3,3,3,
0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,24,0,28,3,3,3,2147483676,0,0,0,28,33,3,3,
0,0,0,0,32,0,0,0,0,0,0,0,2147483713,35,35,35,35,65,0,0,0,0,0,0,0,0,39,0,28,3,3,3,2147483691,42,42,42,43,3,3,3,
0,0,0,0,47,0,0,0,0,0,0,0,2147483667,3,3,3,18,19,0,0,0,0,0,0,0,0,54,0,28,25,3,3,3,3,3,18,3,3,3,3,
0,81,0,66,62,0,0,0,0,0,0,0,2147483667,3,3,3,3,19,0,0,0,0,0,0,0,0,69,88,28,3,3,3,3,3,3,3,3,3,3,3,
35,35,35,35,35,65,0,0,0,0,0,7,22,3,3,3,3,19,0,0,0,0,0,0,0,71,42,42,43,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,25,3,19,0,0,0,0,7,22,3,18,3,3,3,19,0,0,0,0,2,0,0,28,3,3,3,3,10,42,42,42,33,3,3,3,3,3,
3,3,3,3,3,19,0,0,0,2147483713,22,3,3,3,3,3,3,2684354582,2684354567,66,0,0,17,0,0,28,33,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,19,76,76,76,2147483667,3,3,18,3,3,3,3,3,2684354582,65,0,0,32,0,0,28,3,3,3,3,3,3,3,18,42,42,42,18,3,3,
3,3,3,3,33,34,35,35,35,2147483682,3,3,3,3,3,3,3,3,3,19,0,66,62,0,14,29,3,33,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,18,3,3,3,18,35,35,35,35,33,3,25,34,35,35,35,42,29,40,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,10,3,3,3,3,3,3,3,3,3,33,42,18,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
</data>
 </layer>
 <objectgroup id="3" name="WorldCollision" locked="1">
  <object id="36" x="0" y="112" width="48" height="80"/>
  <object id="37" x="48" y="144" width="24" height="48"/>
  <object id="38" x="72" y="128" width="24" height="64"/>
  <object id="39" x="96" y="88" width="48" height="104"/>
  <object id="40" x="144" y="136" width="16" height="56"/>
  <object id="41" x="160" y="152" width="160" height="40"/>
  <object id="42" x="200" y="112" width="120" height="40"/>
  <object id="43" x="224" y="64" width="40" height="48"/>
  <object id="44" x="264" y="88" width="24" height="24"/>
  <object id="45" x="288" y="40" width="32" height="72"/>
  <object id="46" x="0" y="0" width="56" height="48"/>
  <object id="47" x="56" y="0" width="48" height="32"/>
  <object id="48" x="104" y="0" width="40" height="24"/>
  <object id="49" x="80" y="32" width="24" height="24"/>
  <object id="51" x="160" y="0" width="128" height="16"/>
  <object id="54" x="176" y="16" width="40" height="32"/>
  <object id="55" x="216" y="16" width="16" height="8"/>
 </objectgroup>
 <objectgroup id="2" name="Player">
  <object id="5" gid="106" x="0" y="0" width="8" height="8"/>
 </objectgroup>
</map>`

// Create realistic TMX for testing using actual sample map data
func createRealTmx() *Tmx {
	var tmx Tmx
	err := xml.Unmarshal([]byte(sampleMapTMX), &tmx)
	if err != nil {
		panic("Failed to parse sample TMX: " + err.Error())
	}
	return &tmx
}

// Create a minimal TMX for comparison tests
func createMinimalTmx() *Tmx {
	layer := Layer{
		ID:     1,
		Name:   "TestLayer",
		Width:  10,
		Height: 10,
		Flags:  LayerFlagVisible,
		Data: Data{
			Encoding:    EncodingBase64,
			Compression: CompressionNone,
			Content:     "",
		},
	}

	return &Tmx{
		Width:      10,
		Height:     10,
		TileWidth:  16,
		TileHeight: 16,
		Flags:      0,
		Layers:     []Layer{layer},
		Tilesets: []Tileset{
			{
				FirstGID: 1,
				Source:   "test.tsx",
			},
		},
	}
}

// REAL DATA BENCHMARKS - Using actual sample-map.tmx data

func BenchmarkRealTilemapGetTilesSmall(b *testing.B) {
	tmx := createRealTmx()
	tm, err := NewTilemapWithTmx(tmx)
	if err != nil {
		b.Fatal(err)
	}

	b.ReportAllocs()
	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		// Small region: 32x32 pixels (4x4 tiles in 8x8 tile map)
		iterator, err := tm.GetTiles(0, 0, 32, 32)
		if err != nil {
			b.Fatal(err)
		}
		_ = iterator
	}
}

func BenchmarkRealTilemapGetTilesMedium(b *testing.B) {
	tmx := createRealTmx()
	tm, err := NewTilemapWithTmx(tmx)
	if err != nil {
		b.Fatal(err)
	}

	b.ReportAllocs()
	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		// Medium region: 128x96 pixels (16x12 tiles)
		iterator, err := tm.GetTiles(0, 0, 128, 96)
		if err != nil {
			b.Fatal(err)
		}
		_ = iterator
	}
}

func BenchmarkRealTilemapGetTilesLarge(b *testing.B) {
	tmx := createRealTmx()
	tm, err := NewTilemapWithTmx(tmx)
	if err != nil {
		b.Fatal(err)
	}

	b.ReportAllocs()
	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		// Large region: entire map (320x192 pixels = 40x24 tiles)
		iterator, err := tm.GetTiles(0, 0, 320, 192)
		if err != nil {
			b.Fatal(err)
		}
		_ = iterator
	}
}

func BenchmarkRealTilemapCacheHit(b *testing.B) {
	tmx := createRealTmx()
	tm, err := NewTilemapWithTmx(tmx)
	if err != nil {
		b.Fatal(err)
	}

	// Prime the cache
	_, err = tm.GetTiles(64, 64, 128, 128)
	if err != nil {
		b.Fatal(err)
	}

	b.ReportAllocs()
	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		// Same region - should hit cache
		iterator, err := tm.GetTiles(64, 64, 128, 128)
		if err != nil {
			b.Fatal(err)
		}
		_ = iterator
	}
}

func BenchmarkRealTilemapIteratorProcessing(b *testing.B) {
	tmx := createRealTmx()
	tm, err := NewTilemapWithTmx(tmx)
	if err != nil {
		b.Fatal(err)
	}

	iterator, err := tm.GetTiles(0, 0, 160, 120)
	if err != nil {
		b.Fatal(err)
	}

	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		iterator.Reset()
		tileCount := 0
		layerCount := 0

		for iterator.HasNext() {
			tiles := iterator.Next()
			layerCount++
			tileCount += len(tiles)

			// Actually process the tile data to ensure it's not optimized away
			for _, tile := range tiles {
				_ = tile.X
				_ = tile.Y
				_ = tile.TileID
				_ = tile.TsIdx
				_ = tile.FlipFlag
			}
		}

		// Prevent optimization of variables
		_ = tileCount
		_ = layerCount
	}
}

func BenchmarkRealTilemapSliceSharingStress(b *testing.B) {
	tmx := createRealTmx()
	tm, err := NewTilemapWithTmx(tmx)
	if err != nil {
		b.Fatal(err)
	}

	b.ReportAllocs()
	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		// Create multiple iterators for overlapping regions
		iter1, err := tm.GetTiles(0, 0, 80, 80)
		if err != nil {
			b.Fatal(err)
		}

		iter2, err := tm.GetTiles(0, 0, 80, 80) // Same region
		if err != nil {
			b.Fatal(err)
		}

		iter3, err := tm.GetTiles(40, 40, 120, 120) // Overlapping region
		if err != nil {
			b.Fatal(err)
		}

		// Access data from all iterators to test for slice sharing issues
		tiles1 := iter1.Next()
		tiles2 := iter2.Next()
		tiles3 := iter3.Next()

		// Process some data to prevent optimization
		if len(tiles1) > 0 {
			_ = tiles1[0].TileID
		}
		if len(tiles2) > 0 {
			_ = tiles2[0].TileID
		}
		if len(tiles3) > 0 {
			_ = tiles3[0].TileID
		}
	}
}

func BenchmarkRealTilemapSequentialQueries(b *testing.B) {
	tmx := createRealTmx()
	tm, err := NewTilemapWithTmx(tmx)
	if err != nil {
		b.Fatal(err)
	}

	regions := []struct {
		minX, minY, maxX, maxY float32
	}{
		{0, 0, 64, 64},
		{64, 0, 128, 64},
		{128, 0, 192, 64},
		{0, 64, 64, 128},
		{64, 64, 128, 128},
	}

	b.ReportAllocs()
	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		for _, region := range regions {
			iterator, err := tm.GetTiles(region.minX, region.minY, region.maxX, region.maxY)
			if err != nil {
				b.Fatal(err)
			}

			// Process first layer to ensure data is accessed
			if iterator.HasNext() {
				tiles := iterator.Next()
				for _, tile := range tiles {
					_ = tile.TileID
				}
			}
		}
	}
}

// COMPARATIVE BENCHMARKS - Minimal vs Real data

func BenchmarkBasicTilemapGetTiles(b *testing.B) {
	tmx := createMinimalTmx()
	tm, err := NewTilemapWithTmx(tmx)
	if err != nil {
		b.Fatal(err)
	}

	b.ReportAllocs()
	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		iterator, err := tm.GetTiles(0, 0, 32, 32)
		if err != nil {
			b.Fatal(err)
		}
		_ = iterator
	}
}

func BenchmarkBasicTilemapGetTilesCacheHit(b *testing.B) {
	tmx := createMinimalTmx()
	tm, err := NewTilemapWithTmx(tmx)
	if err != nil {
		b.Fatal(err)
	}

	// Prime the cache
	_, err = tm.GetTiles(0, 0, 32, 32)
	if err != nil {
		b.Fatal(err)
	}

	b.ReportAllocs()
	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		iterator, err := tm.GetTiles(0, 0, 32, 32)
		if err != nil {
			b.Fatal(err)
		}
		_ = iterator
	}
}

func BenchmarkBasicTilemapIteratorIteration(b *testing.B) {
	tmx := createMinimalTmx()
	tm, err := NewTilemapWithTmx(tmx)
	if err != nil {
		b.Fatal(err)
	}

	iterator, err := tm.GetTiles(0, 0, 64, 64)
	if err != nil {
		b.Fatal(err)
	}

	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		iterator.Reset()
		for iterator.HasNext() {
			tiles := iterator.Next()
			_ = tiles
		}
	}
}

func BenchmarkBasicTilemapSliceSharing(b *testing.B) {
	tmx := createMinimalTmx()
	tm, err := NewTilemapWithTmx(tmx)
	if err != nil {
		b.Fatal(err)
	}

	b.ReportAllocs()
	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		iter1, err := tm.GetTiles(0, 0, 32, 32)
		if err != nil {
			b.Fatal(err)
		}

		iter2, err := tm.GetTiles(0, 0, 32, 32)
		if err != nil {
			b.Fatal(err)
		}

		tiles1 := iter1.Next()
		tiles2 := iter2.Next()

		_ = tiles1
		_ = tiles2
	}
}

func BenchmarkBasicTilemapAllocations(b *testing.B) {
	tmx := createMinimalTmx()
	tm, err := NewTilemapWithTmx(tmx)
	if err != nil {
		b.Fatal(err)
	}

	b.ReportAllocs()
	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		iterator, err := tm.GetTiles(0, 0, 48, 48)
		if err != nil {
			b.Fatal(err)
		}
		_ = iterator
	}
}

// STRESS TESTS - Testing edge cases and potential problems

func BenchmarkRealTilemapConcurrentAccess(b *testing.B) {
	tmx := createRealTmx()
	tm, err := NewTilemapWithTmx(tmx)
	if err != nil {
		b.Fatal(err)
	}

	b.ReportAllocs()
	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		// Simulate concurrent access patterns
		iter1, _ := tm.GetTiles(0, 0, 80, 80)
		iter2, _ := tm.GetTiles(80, 80, 160, 160)
		iter3, _ := tm.GetTiles(40, 40, 120, 120)

		// Interleave access
		t1 := iter1.Next()
		t2 := iter2.Next()
		t3 := iter3.Next()

		if len(t1) > 0 && len(t2) > 0 && len(t3) > 0 {
			_ = t1[0].TileID + t2[0].TileID + t3[0].TileID
		}
	}
}

func BenchmarkRealTilemapMemoryFootprint(b *testing.B) {
	tmx := createRealTmx()
	tm, err := NewTilemapWithTmx(tmx)
	if err != nil {
		b.Fatal(err)
	}

	b.ReportAllocs()
	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		// Create many iterators to test memory usage
		iterators := make([]TileIterator, 10)

		for j := 0; j < 10; j++ {
			x := float32(j * 20)
			y := float32(j * 15)
			iterators[j], _ = tm.GetTiles(x, y, x+40, y+30)
		}

		// Use all iterators
		totalTiles := 0
		for _, iter := range iterators {
			for iter.HasNext() {
				tiles := iter.Next()
				totalTiles += len(tiles)
			}
		}
		_ = totalTiles
	}
}
